// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OzelDersYerim.Data.Concrete.EfCore.Context;

#nullable disable

namespace OzelDersYerim.Data.Migrations
{
    [DbContext(typeof(OzelDersYerimContext))]
    [Migration("20230126201320_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d41cfa85-8dbc-46f5-becc-d1c99b323dbb",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "e32f6815-c4ce-4af5-8fe4-1563bb5984ed",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "558574f8-c217-4ce2-a556-a0c1002efd1b",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f51a33d9-90b7-4304-8f27-296121b22ed8",
                            RoleId = "e32f6815-c4ce-4af5-8fe4-1563bb5984ed"
                        },
                        new
                        {
                            UserId = "36c1db42-7495-477f-921e-ba037f5188ed",
                            RoleId = "558574f8-c217-4ce2-a556-a0c1002efd1b"
                        },
                        new
                        {
                            UserId = "arzu",
                            RoleId = "558574f8-c217-4ce2-a556-a0c1002efd1b"
                        },
                        new
                        {
                            UserId = "admin",
                            RoleId = "d41cfa85-8dbc-46f5-becc-d1c99b323dbb"
                        },
                        new
                        {
                            UserId = "ahj8-ahjs-87yht",
                            RoleId = "558574f8-c217-4ce2-a556-a0c1002efd1b"
                        },
                        new
                        {
                            UserId = "c3Mr3-s77Nel",
                            RoleId = "e32f6815-c4ce-4af5-8fe4-1563bb5984ed"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Branches", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchName = "Matematik",
                            CreatedDate = new DateTime(2023, 1, 26, 23, 13, 20, 35, DateTimeKind.Local).AddTicks(1081),
                            Description = "Matematik dersleri burada yer alır.",
                            ImageUrl = "matematik.png",
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            BranchName = "Kimya",
                            CreatedDate = new DateTime(2023, 1, 26, 23, 13, 20, 35, DateTimeKind.Local).AddTicks(1094),
                            Description = "Kimya dersleri burada yer alır.",
                            ImageUrl = "kimya.png",
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 3,
                            BranchName = "İngilizce",
                            CreatedDate = new DateTime(2023, 1, 26, 23, 13, 20, 35, DateTimeKind.Local).AddTicks(1096),
                            Description = "İngilizce dersleri burada yer alır.",
                            ImageUrl = "ingilizce.png",
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 4,
                            BranchName = "Müzik",
                            CreatedDate = new DateTime(2023, 1, 26, 23, 13, 20, 35, DateTimeKind.Local).AddTicks(1098),
                            Description = "Müzik dersleri burada yer alır.",
                            ImageUrl = "muzik.png",
                            Url = "muzik"
                        },
                        new
                        {
                            Id = 5,
                            BranchName = "Türkçe",
                            CreatedDate = new DateTime(2023, 1, 26, 23, 13, 20, 35, DateTimeKind.Local).AddTicks(1101),
                            Description = "Türkçe dersleri burada yer alır.",
                            ImageUrl = "turkce.png",
                            Url = "turkce"
                        },
                        new
                        {
                            Id = 6,
                            BranchName = "Bilgisayar",
                            CreatedDate = new DateTime(2023, 1, 26, 23, 13, 20, 35, DateTimeKind.Local).AddTicks(1103),
                            Description = "Bilgisayar dersleri burada yer alır.",
                            ImageUrl = "bilgisayar.png",
                            Url = "bilgisayar"
                        });
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThisUserRole")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f51a33d9-90b7-4304-8f27-296121b22ed8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed11a9a9-f7e0-4e3e-9eaa-8ad353ced4ee",
                            Email = "student@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@GMAIL.COM",
                            NormalizedUserName = "XWE",
                            PasswordHash = "AQAAAAIAAYagAAAAEAu/xMVrA2E0GWwL/HYTOZLqHG6JBRIhxdJag/YLSsATK0fhRT+f+o1TFGEduJTjYQ==",
                            PhoneNumber = "05557778855",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6273fdbf-3d54-4703-b874-26f9f413ba14",
                            ThisUserRole = "Student",
                            TwoFactorEnabled = false,
                            UserName = "xwe"
                        },
                        new
                        {
                            Id = "36c1db42-7495-477f-921e-ba037f5188ed",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fea0a4d8-899a-41a3-bd1f-0d5ebb5eb447",
                            Email = "teacher@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER@GMAIL.COM",
                            NormalizedUserName = "ABC",
                            PasswordHash = "AQAAAAIAAYagAAAAEGfv5O4Z6zht+wVk/RrhtGm5EDQeFEuyFT0KTvxnOL06wMR06cCnS6RQyYsdxY9yOA==",
                            PhoneNumber = "05556669944",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30214faa-e554-476a-9349-0c4f3d3a68e9",
                            ThisUserRole = "Teacher",
                            TwoFactorEnabled = false,
                            UserName = "abc"
                        },
                        new
                        {
                            Id = "arzu",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8bfc2f8-9998-4aa6-a6fa-84129a391f77",
                            Email = "arzu@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ARZU@GMAIL.COM",
                            NormalizedUserName = "KLM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFPLrVe51J6QVLab+Tu+KWodGAVUjUipywb+olHrBftOXyd3ZYP22UyKzQcg6iaHaQ==",
                            PhoneNumber = "05557778855",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d90e1de9-ed81-4242-8f81-72845667e172",
                            ThisUserRole = "Teacher",
                            TwoFactorEnabled = false,
                            UserName = "klm"
                        },
                        new
                        {
                            Id = "admin",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "686c5560-141c-4cb2-a8dd-503a957bbe4f",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDJ1HbDC6RpyKgYiShegOItJCpu7c9K5rjIU+vQEgu0T8atpEvwKIMCuXTFvdP2MZQ==",
                            PhoneNumber = "05551112233",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d0cc910e-643a-4256-8827-4aaa15778dfe",
                            ThisUserRole = "Admin",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "ahj8-ahjs-87yht",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "243bc742-4abb-4e96-a016-4f42e05f1585",
                            Email = "mehmet@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET@GMAIL.COM",
                            NormalizedUserName = "MEHMETHOCA",
                            PasswordHash = "AQAAAAIAAYagAAAAEElOLPbTgYmsgKK+MsJ3owWapuiop/6Q1IXfv/RHKN3MpBRYhHWFmVYcipQnn9uDDA==",
                            PhoneNumber = "05553335566",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "289e04d5-4fa6-42c1-a31b-63438a2dc0f3",
                            ThisUserRole = "Teacher",
                            TwoFactorEnabled = false,
                            UserName = "mehmetthoca"
                        },
                        new
                        {
                            Id = "c3Mr3-s77Nel",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "166e4e65-4a76-406d-87c6-b6cc9ed05721",
                            Email = "cemre@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CEMRE@GMAIL.COM",
                            NormalizedUserName = "CEMRESENEL",
                            PasswordHash = "AQAAAAIAAYagAAAAEDkDgJUtAbIjJUd38jyiYRajwzP7c/FvnA4jb5VSI2DCnsPBbOY1klbMPywSGzU9jQ==",
                            PhoneNumber = "05557770606",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "09cd02f8-ed11-40bf-9879-27ef0c9b6b9e",
                            ThisUserRole = "Student",
                            TwoFactorEnabled = false,
                            UserName = "CemreSenel"
                        });
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Lessons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            Description = "Sınav öncesi tekar, özel konu analıtımı ve soru çözümü kampı içeriklidir.",
                            Name = "TYT-Matematik hazırlık dersleri.",
                            PricePerHour = 150m,
                            Url = "tyt-matematik-hazirlik-dersleri"
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 2,
                            Description = "Üniversite sınavlarına ve okul sınavlarına özel etüd yapılır.",
                            Name = "Lise düzeyinde Kimya dersleri.",
                            PricePerHour = 100m,
                            Url = "lise-duzeyinde-kimya-dersleri"
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 3,
                            Description = "Dil Bilgisi,yazma ve konuşma olarak ileri seviye bir eğitim.",
                            Name = "A1-C2 arası konuşma pratikli İnglizce eğitimi.",
                            PricePerHour = 250m,
                            Url = "a1-c2-arasi-konusma-pratikli-inglizce-egitimi."
                        });
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1999, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mert Korkut",
                            Gender = "Erkek",
                            LastName = "Muslu",
                            Location = "Kadıköy",
                            ProfilePictureUrl = "1.png",
                            Url = "ogrenci-mert-korkut-muslu",
                            UserId = "f51a33d9-90b7-4304-8f27-296121b22ed8"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1995, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Cemre ",
                            Gender = "Erkek",
                            LastName = "Şenel",
                            Location = "Beşiktaş",
                            ProfilePictureUrl = "2.png",
                            Url = "ogrenci-cemre-senel",
                            UserId = "c3Mr3-s77Nel"
                        });
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.StudentLesson", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudentId", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("StudentsLessons", (string)null);

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            LessonId = 1
                        },
                        new
                        {
                            StudentId = 2,
                            LessonId = 3
                        });
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("About")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Experience")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PricePerHour")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Samsun 19 Mayıs Universitesi Matematik Bölümü mezunuyum.",
                            DateOfBirth = new DateTime(1978, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Experience = "15",
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            IsHome = true,
                            LastName = "Yılmaz",
                            Location = "Beşiktaş",
                            PricePerHour = 450m,
                            ProfilePictureUrl = "10.png",
                            Url = "ogretmen-ahmet-yilmaz",
                            UserId = "36c1db42-7495-477f-921e-ba037f5188ed"
                        },
                        new
                        {
                            Id = 2,
                            About = "İngilizce Öğretmeniyim. Her türlü İngilizce sınavlarına hazırlık konusunda ders vermekteyim.",
                            DateOfBirth = new DateTime(1985, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Experience = "5",
                            FirstName = "Arzu",
                            Gender = "Kadın",
                            IsHome = false,
                            LastName = "Doğramacı",
                            Location = "Şişli",
                            PricePerHour = 300m,
                            ProfilePictureUrl = "11.png",
                            Url = "ogretmen-arzu-dogramaci",
                            UserId = "arzu"
                        },
                        new
                        {
                            Id = 3,
                            About = "Boğaziçi Üniversitesi Mezunuyum. 28 yaşındayım. Özel bir lisede Kimya Öğretmenliği yapıyorum.",
                            DateOfBirth = new DateTime(1990, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Experience = "6",
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            IsHome = false,
                            LastName = "Yıldırım",
                            Location = "Etiler",
                            PricePerHour = 300m,
                            ProfilePictureUrl = "12.png",
                            Url = "ogretmen-mehmet-yildirim",
                            UserId = "ahj8-ahjs-87yht"
                        });
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.TeacherBranch", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("TeacherBranches", (string)null);

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            BranchId = 1
                        },
                        new
                        {
                            TeacherId = 1,
                            BranchId = 2
                        },
                        new
                        {
                            TeacherId = 2,
                            BranchId = 1
                        },
                        new
                        {
                            TeacherId = 2,
                            BranchId = 2
                        },
                        new
                        {
                            TeacherId = 3,
                            BranchId = 4
                        },
                        new
                        {
                            TeacherId = 3,
                            BranchId = 5
                        });
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.TeacherLesson", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("TeachersLessons", (string)null);

                    b.HasData(
                        new
                        {
                            TeacherId = 3,
                            LessonId = 2
                        },
                        new
                        {
                            TeacherId = 1,
                            LessonId = 1
                        },
                        new
                        {
                            TeacherId = 2,
                            LessonId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OzelDersYerim.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OzelDersYerim.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDersYerim.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OzelDersYerim.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.Lesson", b =>
                {
                    b.HasOne("OzelDersYerim.Entity.Concrete.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.Student", b =>
                {
                    b.HasOne("OzelDersYerim.Entity.Concrete.Identity.User", "User")
                        .WithOne("Students")
                        .HasForeignKey("OzelDersYerim.Entity.Concrete.Student", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.StudentLesson", b =>
                {
                    b.HasOne("OzelDersYerim.Entity.Concrete.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDersYerim.Entity.Concrete.Student", "Student")
                        .WithMany("StudentLessons")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("OzelDersYerim.Entity.Concrete.Identity.User", "User")
                        .WithOne("Teachers")
                        .HasForeignKey("OzelDersYerim.Entity.Concrete.Teacher", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.TeacherBranch", b =>
                {
                    b.HasOne("OzelDersYerim.Entity.Concrete.Branch", "Branch")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDersYerim.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.TeacherLesson", b =>
                {
                    b.HasOne("OzelDersYerim.Entity.Concrete.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDersYerim.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherLessons")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.Branch", b =>
                {
                    b.Navigation("TeacherBranches");
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.Student", b =>
                {
                    b.Navigation("StudentLessons");
                });

            modelBuilder.Entity("OzelDersYerim.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("TeacherBranches");

                    b.Navigation("TeacherLessons");
                });
#pragma warning restore 612, 618
        }
    }
}
